# -*- coding: utf-8 -*-
"""movie_recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ony6zhYwMG94qmLjFfRsO-BVs7ZPKskc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import seaborn as sns
sns.set()
import re
import difflib
from PIL import Image
import requests
from io import BytesIO

movie_dataframe = pd.read_json('/content/cleaned_movie_dataframe.json')
movie_dataframe.head()

#shape of the dataset
movie_dataframe.shape

#information about dataset
movie_dataframe.info()

#columns in the dataset
movie_dataframe.columns

#statistics for numerical value
movie_dataframe.describe()

#statistics for object value
movie_dataframe.describe(include = 'object')

#data types
movie_dataframe.dtypes

#checking for missing values
movie_dataframe.isnull().sum()

"""**Data Visualization**"""

# Create scatter plot of Votes versus Rating
plt.scatter(movie_dataframe['Rating'], movie_dataframe['Votes'])
plt.title('IMDb Ratings vs. Votes')
plt.xlabel('Rating')
plt.ylabel('Votes')
plt.show()

plt.hist(movie_dataframe['Rating'], bins=10)
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.title('Distribution of Ratings')
plt.show()

top_grossing = movie_dataframe.sort_values('Gross', ascending=False).head(10)
plt.barh(top_grossing['Title'], top_grossing['Gross'])
plt.xlabel('Gross Earnings')
plt.title('Top 10 Highest Grossing Movies')
plt.show()

plt.scatter(movie_dataframe['Rating'], movie_dataframe['Metascore'])
plt.xlabel('Rating')
plt.ylabel('Metascore')
plt.title('Metascores vs. Ratings')
plt.show()

movie_dataframe['Certificate'].value_counts().plot(kind='bar')
plt.xlabel('Certificate')
plt.ylabel('Number of Movies')
plt.title('Distribution of Movie Certificates')
plt.show()

"""**Feature Selection**"""

selected_columns = ['Genre','Director','Stars','Rating','Year','Description']
selected_features = movie_dataframe[selected_columns]
selected_features

"""**Remove list from Genre and Stars columns**"""

def join_strings(df, column_name):
    df[column_name] = df[column_name].apply(lambda x: ' '.join(x))
    return df
join_strings(selected_features,'Genre')
join_strings(selected_features,'Stars')

"""**Combine the following columns:**

**1. Genre**

**2. Director**

**3. Stars**

**4. Rating**

**5. Year**

**6. Description**
"""

def combine_features(movies):
    # Initialize an empty string to store the combined features
    combined_features = ""

    # Iterate through each feature and concatenate its values with a space separator
    for column in movies.columns:
        # Fill any missing values with an empty string and convert to string type
        combined_features += movies[column].fillna('').astype(str) + ' '

    # Strip any leading/trailing whitespace and return the combined string as a pandas Series
    return combined_features.str.strip()

# Call the function on the new_movies dataframe
combined_features = combine_features(selected_features)
combined_features.head()

"""**Compute TfidfVectorizer**"""

def get_feature_vector(data):
    """
    Convert a list of text data into a sparse matrix of TF-IDF vectors.

    Args:
    data (list): A list of strings to be vectorized.

    Returns:
    scipy.sparse.csr_matrix: A sparse matrix of shape (n_samples, n_features) representing the TF-IDF vectors of the input data.

    """

    # Define a TfidfVectorizer object to convert text to TF-IDF vectors
    vectorizer = TfidfVectorizer()

    # Fit the vectorizer on the input data and transform it into a sparse matrix
    feature_vector = vectorizer.fit_transform(data)

    return feature_vector

# Call the function on the combined features
feature_vector = get_feature_vector(combined_features)
print(feature_vector)

"""**Calculate simiarity matrix based on feature vector**"""

def get_cosine_similarity_matrix(feature_vector):
    similarity_matrix = cosine_similarity(feature_vector)
    return similarity_matrix
similarity = get_cosine_similarity_matrix(feature_vector)
similarity[0]

movie_name = input('Enter name of the movie: ')

movie_titles = movie_dataframe['Title'].tolist()

#close match

find_close_match = difflib.get_close_matches(movie_name,movie_titles)
find_close_match

close_match = find_close_match[0]
close_match

movie_location = movie_dataframe[movie_dataframe.Title == close_match]
movie_location

movie_index = movie_location.index[0]
movie_index

similarity_score = list(enumerate(similarity[movie_index]))

sort_similar_movies = sorted(similarity_score,key = lambda x:x[1],reverse = True)
sort_similar_movies

def get_movie_posters(similar_movies,movie_dataframe):
    movie_posters = []
    movie_titles = []
    for movie in similar_movies[:12]:
        index = movie[0]
        movie_title = movie_dataframe.iloc[index].Title
        movie_poster = movie_dataframe.iloc[index]['Movie Poster']
        movie_posters.append(movie_poster)
        movie_titles.append(movie_title)
      
    return movie_posters,movie_titles

def show_movie_posters(movie_posters, movie_titles):
    plt.figure(figsize=(10,10))
    for index, url in enumerate(movie_posters):
        response = requests.get(url).content
        img = Image.open(BytesIO(response))
        plt.subplot(4,3,index+1)
        plt.axis('Off')
        plt.imshow(np.array(img))
        plt.title(f'{movie_titles[index]}')
    plt.show()

title_2 = [ re.sub(r'\W+','',title.lower()) for title in movie_dataframe['Title']]
movie_dataframe['Title2'] = title_2
movie_dataframe[['Title','Title2']].head()

def recommend_movie():
  movie_name = input('Enter Movie Name: ').lower()
  print(f'\nMovie Name: {movie_name}')
  movie_name = re.sub(r'\W+', '', movie_name)
  
  all_movie_Title = movie_dataframe['Title2'].tolist()
  get_close_match = difflib.get_close_matches(movie_name,all_movie_Title)
  
  if len(get_close_match) == 0:
    print(f'No close Match Found')
  else:
    print(f'\nClose Matches')
    close_match = get_close_match[0]
    for index,match in enumerate(get_close_match,start = 1):
      print(f'{index}. {match}')
    print(f'\nChoosen Movie name: {close_match}')


    movie_index = movie_dataframe[movie_dataframe.Title2 == close_match].index[0]
    print(f'Movie index: {movie_index}')

    similarity_score = list(enumerate(similarity[movie_index]))
    sorted_similarity_score = sorted(similarity_score,key = lambda x: x[1],reverse = True)

    print('\n Movie Suggested For You:')
    movie_posters,movie_titles = get_movie_posters(sorted_similarity_score,movie_dataframe)
    show_movie_posters(movie_posters,movie_titles)
      
recommend_movie()