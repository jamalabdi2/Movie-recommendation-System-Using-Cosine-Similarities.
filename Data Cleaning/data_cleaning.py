# -*- coding: utf-8 -*-
"""data_cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckkdBHUtA_LIaLORs2d-C7PVOSiboYQ5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import re

#load the dataset
movie_json_path = '/content/idmb.json'
movie_dataframe = pd.read_json(movie_json_path)
movie_dataframe.head()

#data types
movie_dataframe.dtypes

#shape of the dataset
movie_dataframe.shape

"""**Data Cleaning**"""

#missing values
movie_dataframe.isnull().sum()

#drop year row with missing values
movie_dataframe[movie_dataframe['Year'].isnull()]
movie_dataframe = movie_dataframe.drop(2876)

"""**Clean year column**"""

def drop_list_in_year(df: pd.DataFrame) ->pd.DataFrame:
  if df.empty:
    raise ValueError('Dataframe is empty')
  
  if 'Year' not in df.columns:
    raise KeyError('Year column does not exist in the Dataframe')

  for index,year in enumerate(df['Year']):
    if isinstance(year,list):
      try:
        df.drop(index = index,inplace = True)
        print(f'Year: {year} have been dropped from the dataframe')
      except Exception as e:
        print(f'Error occured while dropping the rows with index: {index}')
        
  return df
      

drop_list_in_year(movie_dataframe)

"""**Dealing with Missing Values**"""

columns_with_missing_values = ['Certificate','Runtime','Metascore','Rating','Votes','Gross']

movie_dataframe[columns_with_missing_values].head()

movie_dataframe[columns_with_missing_values].dtypes

"""**Impute Certificate column with Mode**"""

movie_dataframe['Certificate'].value_counts().plot(kind = 'bar')
plt.show()

"""**Mode of column certificate**"""

def impute_certificate_column(df:pd.DataFrame) ->pd.DataFrame:
  mode_value = df['Certificate'].mode()[0]
  df['Certificate'].fillna(mode_value,inplace = True)
  return df

impute_certificate_column(movie_dataframe)

movie_dataframe[movie_dataframe['Gross'].isnull() == True].head()



"""**Clean Gross column by removing dollar sign,M symbol, turn data type to float and turn it into a million value**"""

def clean_gross_column(gross:str) ->pd.DataFrame:
  regex_pattern = '[^0-9\.]'
  if gross is not None:
    try:
      new_gross = float(re.sub(regex_pattern,'',gross))*1000000
      return new_gross
    except Exception as e:
      print(f'Problem passing this item:{gross}')
  else:
    return None


movie_dataframe['Gross'] = movie_dataframe['Gross'].apply(clean_gross_column)

"""**Impute Gross missing values with Either mean or Median**"""

def impute_float_column(df:pd.DataFrame,column_name:str,imputing_method: str = 'mean'):
  if imputing_method.lower() == 'mean':
    imputed_value = df[column_name].mean()
  elif imputing_method.lower() == 'median':
    imputed_value = df[column_name].median()
  else:
    valid_methods = ['mean','median']
    raise ValueError(f'Invalid imputing method: {imputing_method}.Valid inputing method are: {valid_methods}')


  df[column_name].fillna(imputed_value,inplace = True)
  return df

impute_float_column(movie_dataframe,'Gross','mean')

"""**Impute Metascore missing values with Either mean or Median**"""

impute_float_column(movie_dataframe,'Metascore','mean')

"""**Impute Runtime missing values with Either mean or Median**"""

impute_float_column(movie_dataframe,'Runtime','mean')

"""**Impute Rating missing values with Either mean or Median**"""

impute_float_column(movie_dataframe,'Rating','median')

"""**Impute Votes missing values with Either mean or Median**"""

df_copy = movie_dataframe.copy()
def str_to_float(value):
  if value is not None:
    try:
      converted_value = float(value.replace(',', ''))
    except ValueError as e:
      print(f'Error while handling this value: {value}')
      converted_value = None
  else:
    converted_value = None
  return converted_value

movie_dataframe['Votes'] = movie_dataframe['Votes'].apply(str_to_float)

impute_float_column(movie_dataframe,'Votes','median')

movie_dataframe.isnull().sum()

movie_dataframe.head()

"""**Save cleaned Data**"""

movie_dataframe.to_json('cleaned_movie_dataframe.json',indent = 4,orient = 'records')
movie_dataframe.to_csv('cleaned_movie_dataframe.csv',sep = '\t',encoding = 'utf-8')